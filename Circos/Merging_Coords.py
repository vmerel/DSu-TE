#!/usr/bin/env python
import os
import sys
import inspect
import re
import argparse
import random

parser = argparse.ArgumentParser(description="""           
Description
-----------
This script merges close alignement generated by promer.
""",formatter_class=argparse.RawDescriptionHelpFormatter,
epilog="""
Authors
-------
    Vincent Merel
""")

#Input files
parser.add_argument("--coords", type=str, required=True, dest="coords", default=None, help="the coords File")
#Output files
parser.add_argument("--output", type=str, required=True, dest="output", default=None, help="the output file")
#Additional arg
parser.add_argument("--interval", type=int, required=True, dest="interval", default=None, help="the interval")

args = parser.parse_args()

##################################################################################################
####################Creating a dictionnary of alignments per couple of Contigs####################
##################################################################################################
coords = open(args.coords,"r")

myDict={}

for line in coords :

	line=line[:-1]
	S_Contig=line.split()[6]
	Q_Contig=line.split()[7]
	Couple=S_Contig+" "+Q_Contig

	if Couple not in myDict :
	  
	  myDict[Couple]=[line]
	  
	else :
	  
	  myDict[Couple].append(line)


coords.close()
#print(myDict) #OK
##################################################################################################
##################################################################################################
##################################################################################################

###################################Parsing the dictionnary#######################################
#####################################Merging eventually##########################################
###################################And writting to  output#######################################
output = open(args.output,"w")

cpt=0
Nkey=0

ToWrite=[]

for key in myDict :
  
  if key=="X Draco":
    print("plop")
    
  line=myDict[key][0].split()
  
  S_Contig=line[6]
  Q_Contig=line[7]
  
  S_Start_Stocked=int(line[0])
  S_End_Stocked=int(line[1])
  
  Q_Start_Stocked=int(line[2])
  Q_End_Stocked=int(line[3])
  
  Aln_Dir_Stocked="" #+ or -
  
  if (Q_End_Stocked-Q_Start_Stocked)<0 :
      print("Something unexpected happened !")
    
  if (S_End_Stocked-S_Start_Stocked)<0:
    print("Something unexpected happened !")

  Nkey=Nkey+1
  
  if len(myDict[key])==1:
    ToWrite.append(line)
    
  for i in range(1,len(myDict[key])) :

    line=myDict[key][i].split()
    
    S_Start=int(line[0])
    S_End=int(line[1])
    
    Q_Start=int(line[2])
    Q_End=int(line[3])
		
    Aln_Dir="" #+ or -
    
    if (Q_End-Q_Start)<0 :
      print("Something unexpected happened !")
      
    if (S_End-S_Start)<0 :
      print("Something unexpected happened !")
    
    cpt=cpt+1
    
    A=1
    
    if (0<=(S_Start-S_End_Stocked)<=args.interval 
      and 0<=(Q_Start-Q_End_Stocked)<=args.interval) :

      S_End_Stocked=S_End
      Q_End_Stocked=Q_End
      Aln_Dir_Stocked=Aln_Dir
      
      if i==len(myDict[key])-1: #Last aln of the contig couples
      
        ToWrite.append([str(S_Start_Stocked),
        str(S_End),
        str(Q_Start_Stocked),
        str(Q_End),
        str(abs(Q_End-Q_Start_Stocked+1)),
        str(abs(S_End-S_Start_Stocked+1)),
        S_Contig,
        Q_Contig])
    
    else :
      
      Aln_Dir_Stocked=Aln_Dir

      ToWrite.append([str(S_Start_Stocked),
      str(S_End_Stocked),
      str(Q_Start_Stocked),
      str(Q_End_Stocked),
      str(abs(S_End_Stocked-S_Start_Stocked+1)),
      str(abs(Q_End_Stocked-Q_Start_Stocked+1)),
      S_Contig,
      Q_Contig])
        
      S_End_Stocked=S_End
      Q_End_Stocked=Q_End
      S_Start_Stocked=S_Start
      Q_Start_Stocked=Q_Start		

      if i==len(myDict[key])-1 : #Last aln of the contig couples
        
        ToWrite.append([str(S_Start_Stocked),
        str(S_End_Stocked),
        str(Q_Start_Stocked),
        str(Q_End_Stocked),
        str(abs(S_End-S_Start_Stocked+1)),
        str(abs(Q_End-Q_Start_Stocked+1)),
        S_Contig,
        Q_Contig])     
  
for item in ToWrite:
  output.write('\t'.join(item)+"\n")
'''
or 
      (Aln_Dir_Stocked=="-" and Aln_Dir=="-"
      and (S_Start-S_End_Stocked)>=0 and (S_Start-S_End_Stocked)<=args.interval 
      and (Q_Start-Q_End_Stocked)<=0 and abs(Q_Start-Q_End_Stocked)<=args.interval):
'''
